<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[拒接服务介绍和DoS分类（一）]]></title>
    <url>%2F2019%2F06%2F15%2F%E6%8B%92%E6%8E%A5%E6%9C%8D%E5%8A%A1%E4%BB%8B%E7%BB%8D%E5%92%8CDoS%E5%88%86%E7%B1%BB%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[什么是DDOSDDOS是（Distributed Denial of Service）的缩写，即分布式阻断服务，黑客利用入侵到的傀儡主机攻击来达到“妨碍正常使用者使用服务”的目的，这样就形成了DDOS攻击，随着互联网的不断发展，竞争越来越激烈，各式各样的DDOS攻击开始出现。 拒绝服务 DOS不是DoS DoS(Denial of Service)拒接服务，利用程序漏洞或一对一的资源消耗 DDOS分布式拒绝服务 多对一的攻击汇聚资源能力，重点在于量大，属于资源消耗型 历史 以前：欠缺技术的无赖，我ping死你（最难缠的无赖） 现在：最强大最危险的攻击，攻击方式众多 DoS分类 网络基于巨量的flood耗尽目标的网络带宽的资源消耗ICMP Flood 、UDP Flood 协议攻击协议漏洞发起的拒绝服务攻击syn flood 、ping of Death 、ARP 、DNS 、802.11 、SSL 应用1.针对应用软件和操作系统漏洞发起的拒绝服务攻击2.大量频繁访问消耗系统资源严重的应用（cc)3.通产表现为操作系统运行正常，网络流量不大，但服务停止响应 为何会被DoS 从攻击者到被害者-网络——&gt;FW——&gt;服务器os——&gt;服务应用 资源消耗-网络：带宽-FW：吞吐量、并发连接-服务器：CPU、内存、I/O-应用：处理请求能力，对os资源的使用权 程序漏洞攻击-缓冲区溢出-协议、程序逻辑漏洞 链路上任何一点都可成为目标 草图]]></content>
      <categories>
        <category>DDOS攻防学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MySQL数据库连接与管理（四）]]></title>
    <url>%2F2019%2F06%2F13%2FMySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E4%B8%8E%E7%AE%A1%E7%90%86%EF%BC%88%E5%9B%9B%EF%BC%89%2F</url>
    <content type="text"><![CDATA[使用Linux连接mysql服务器从命令行中本地连接mysql服务器1[root@hhost]# mysql -u root -p sh 远程登陆MySQL1[root@hhost]# mysql -h 服务器IP -u root 登录成功后会出现 mysql&gt; 命令提示窗口 显示所有数据库，注意后面的；12345678mysql&gt; show databases;+--------------------+| Database |+--------------------+| information_schema || test |+--------------------+2 rows in set (0.10 sec) 连接数据库1use 数据库名 查看表12345678mysql&gt; show tables;+----------------+| Tables_in_test |+----------------+| runoob_tbl || sys_menu |+----------------+2 rows in set (0.00 sec) 查表所有内容1select * from 表名; 显示表的属性，属性类型，主键信息 ，是否为 NULL，默认值等其他信息1show columns from 数据表; 12345678910mysql&gt; show columns from runoob_tbl;+-----------------+------------------+------+-----+---------+----------------+| Field | Type | Null | Key | Default | Extra |+-----------------+------------------+------+-----+---------+----------------+| runoob_id | int(10) unsigned | NO | PRI | NULL | auto_increment || runoob_title | varchar(100) | NO | | NULL | || runoob_author | varchar(40) | NO | | NULL | || submission_date | date | YES | | NULL | |+-----------------+------------------+------+-----+---------+----------------+4 rows in set (0.06 sec) 显示数据表的详细索引信息，包括PRIMARY KEY（主键）。1show index from runoob_tbl; 1234567mysql&gt; show index from runoob_tbl;+------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+| Table | Non_unique | Key_name | Seq_in_index | Column_name | Collation | Cardinality | Sub_part | Packed | Null | Index_type | Comment | Index_comment |+------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+| runoob_tbl | 0 | PRIMARY | 1 | runoob_id | A | 0 | NULL | NULL | | BTREE | | |+------------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+1 row in set (0.00 sec) 显示数据库test中的所有表信息1show table status from 库名; 12345678mysql&gt; show table status from test;+------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+-------------+------------+-----------------+----------+----------------+---------+| Name | Engine | Version | Row_format | Rows | Avg_row_length | Data_length | Max_data_length | Index_length | Data_free | Auto_increment | Create_time | Update_time | Check_time | Collation | Checksum | Create_options | Comment |+------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+-------------+------------+-----------------+----------+----------------+---------+| runoob_tbl | InnoDB | 10 | Compact | 0 | 0 | 16384 | 0 | 0 | 0 | 1 | 2019-06-05 14:57:14 | NULL | NULL | utf8_general_ci | NULL | | || sys_menu | InnoDB | 10 | Compact | 0 | 0 | 16384 | 0 | 0 | 0 | 1 | 2019-06-03 09:54:08 | NULL | NULL | utf8_general_ci | NULL | | 菜单 |+------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+-------------+------------+-----------------+----------+----------------+---------+2 rows in set (0.00 sec) 表名以runoob开头的表的信息1show table status from 库名 like '表名%'; 1234567mysql&gt; show table status from test like 'runoob%';+------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+-------------+------------+-----------------+----------+----------------+---------+| Name | Engine | Version | Row_format | Rows | Avg_row_length | Data_length | Max_data_length | Index_length | Data_free | Auto_increment | Create_time | Update_time | Check_time | Collation | Checksum | Create_options | Comment |+------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+-------------+------------+-----------------+----------+----------------+---------+| runoob_tbl | InnoDB | 10 | Compact | 0 | 0 | 16384 | 0 | 0 | 0 | 1 | 2019-06-05 14:57:14 | NULL | NULL | utf8_general_ci | NULL | | |+------------+--------+---------+------------+------+----------------+-------------+-----------------+--------------+-----------+----------------+---------------------+-------------+------------+-----------------+----------+----------------+---------+1 row in set (0.00 sec) 加上 \G，查询结果按列打印1show table status from 库名 like '表名%'\G; 123456789101112131415161718192021222324mysql&gt; show table status from test like 'runoob%'\G;*************************** 1. row *************************** Name: runoob_tbl Engine: InnoDB Version: 10 Row_format: Compact Rows: 0 Avg_row_length: 0 Data_length: 16384Max_data_length: 0 Index_length: 0 Data_free: 0 Auto_increment: 1 Create_time: 2019-06-05 14:57:14 Update_time: NULL Check_time: NULL Collation: utf8_general_ci Checksum: NULL Create_options: Comment: 1 row in set (0.00 sec)ERROR: No query specified]]></content>
      <categories>
        <category>MySQL数据库学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MySQL数据库开启与关闭（三）]]></title>
    <url>%2F2019%2F06%2F12%2FMySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%BC%80%E5%90%AF%E4%B8%8E%E5%85%B3%E9%97%AD%EF%BC%88%E4%B8%89%EF%BC%89%2F</url>
    <content type="text"><![CDATA[启动方式1、使用linux命令service 启动：1service mysqld start 2、使用 mysqld 脚本启动：1/etc/inint.d/mysqld start 3、使用 safe_mysqld 启动：1safe_mysqld&amp; 停止方式1、使用 service 启动：1service mysqld stop 2、使用 mysqld 脚本启动：1/etc/inint.d/mysqld stop 3、1mysqladmin shutdown 重启方式1、使用 service 启动：1service mysqld restart 2、使用 mysqld 脚本启动：1/etc/inint.d/mysqld restart 查看mysql端口是否已经使用，使用netstat -anp 命令查看服务器端口使用情况]]></content>
      <categories>
        <category>MySQL数据库学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MySQL数据库安装（二）]]></title>
    <url>%2F2019%2F06%2F12%2FMySQL%E6%95%B0%E6%8D%AEcentos%E5%AE%89%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Linux上安装MySQL安装前，我们可以检测系统是否自带安装 MySQL:1rpm -qa | grep mysql 如果系统有安装，那可以选择进行卸载12rpm -e mysql // 普通删除模式 rpm -e --nodeps mysql // 强力删除模式，如果使用上面命令删除时，提示有依赖的其它文件，则用该命令可以对其进行强力删除 Centos7安装 MySQL：Centos7 系统下使用 yum 命令安装 MySQL，需要注意的是 CentOS 7 版本中 MySQL数据库已从默认的程序列表中移除，所以在安装前我们需要先去官网下载 Yum 资源包，下载地址为：https://dev.mysql.com/downloads/repo/yum/ https://dev.mysql.com/downloads/repo/yum/ 1234wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm rpm -ivh mysql-community-release-el7-5.noarch.rpmyum updateyum install mysql-server 权限设置：1chown mysql:mysql -R /var/lib/mysql 初始化 MySQL：1mysqld --initialize 启动 MySQL：1systemctl start mysqld 查看 MySQL 运行状态：1systemctl status mysqld mariadb数据库的相关命令是：1234systemctl start mariadb #启动MariaDB systemctl stop mariadb #停止MariaDB systemctl restart mariadb #重启MariaDB systemctl enable mariadb #设置开机启动 验证 MySQL 安装使用 mysqladmin 工具来获取服务器状态：1[root@host]# mysqladmin --version linux上该命令将输出以下结果，该结果基于你的系统信息：1mysqladmin Ver 8.23 Distrib 5.0.9-0, for redhat-linux-gnu on i386 如果以上命令执行后未输出任何信息，说明Mysql未安装成功。 Mysql安装后Mysql安装成功后，默认的root用户密码为空，你可以使用以下命令来创建root用户的密码：1[root@host]# mysqladmin -u root password "new_password"; 连接到Mysql服务器：1[root@host]# mysql -u root -p Enter password:*******]]></content>
      <categories>
        <category>MySQL数据库学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[MySQL数据库 初学（一）]]></title>
    <url>%2F2019%2F06%2F11%2FMySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E5%88%9D%E5%AD%A6%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[什么是数据库？数据库（Database）是按照数据结构来组织、存储和管理数据的仓库。每个数据库都有一个或多个不同的 API 用于创建，访问，管理，搜索和复制所保存的数据。我们也可以将数据存储在文件中，但是在文件中读写数据速度相对较慢。所以，现在我们使用关系型数据库管理系统（RDBMS）来存储和管理的大数据量。所谓的关系型数据库，是建立在关系模型基础上的数据库，借助于集合代数等数学概念和方法来处理数据库中的数据。RDBMS 即关系数据库管理系统(Relational Database Management System)的特点： 1.数据以表格的形式出现 2.每行为各种记录名称 3.每列为记录名称所对应的数据域 4.许多的行和列组成一张表单 5.若干的表单组成database RDBMS 术语 数据库: 数据库是一些关联表的集合。 数据表: 表是数据的矩阵。在一个数据库中的表看起来像一个简单的电子表格。 列: 一列(数据元素) 包含了相同的数据, 例如邮政编码的数据。 行：一行（=元组，或记录）是一组相关的数据，例如一条用户订阅的数据。 冗余：存储两倍数据，冗余降低了性能，但提高了数据的安全性。 主键：主键是唯一的。一个数据表中只能包含一个主键。你可以使用主键来查询数据。 外键：外键用于关联两个表。 复合键：复合键（组合键）将多个列作为一个索引键，一般用于复合索引。 索引：使用索引可快速访问数据库表中的特定信息。索引是对数据库表中一列或多列的值进行排序的一种结构。类似于书籍的目录。 参照完整性: 参照的完整性要求关系中不允许引用不存在的实体。与实体完整性是关系模型必须满足的完整性约束条件，目的是保证数据的一致性。 表头(header): 每一列的名称; 列(col): 具有相同数据类型的数据的集合; 行(row): 每一行用来描述某条记录的具体信息; 值(value): 行的具体信息, 每个值必须与该列的数据类型相同; 键(key): 键的值在当前列中具有唯一性。 MySQL数据库MySQL 是一个关系型数据库管理系统，由瑞典 MySQL AB 公司开发，目前属于 Oracle 公司。MySQL 是一种关联数据库管理系统，关联数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。 MySQL 是开源的，所以你不需要支付额外的费用。 MySQL 支持大型的数据库。可以处理拥有上千万条记录的大型数据库。 MySQL 使用标准的 SQL 数据语言形式。 MySQL 可以运行于多个系统上，并且支持多种语言。这些编程语言包括 C、C++、Python、Java、Perl、PHP、Eiffel、Ruby 和 Tcl 等。 MySQL 对PHP有很好的支持，PHP 是目前最流行的 Web 开发语言。 MySQL 支持大型数据库，支持 5000 万条记录的数据仓库，32 位系统表文件最大可支持 4GB，64 位系统支持最大的表文件为8TB。 MySQL 是可以定制的，采用了 GPL 协议，你可以修改源码来开发自己的 MySQL 系统。]]></content>
      <categories>
        <category>MySQL数据库学习</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[中兴光猫修改mac和sn]]></title>
    <url>%2F2019%2F05%2F17%2F%E4%B8%AD%E5%85%B4%E5%85%89%E7%8C%AB%E4%BF%AE%E6%94%B9mac%E5%92%8Csn%2F</url>
    <content type="text"><![CDATA[我们更换光猫的时候因为loid不同不能入网；本经验教程将教大家如何修改中兴光猫F620的loid与mac地址这类的信息； 废话不多说 工具 中兴光猫F620 网线 电脑方法1.电脑通过网线连接光猫的LAN口任意一端口；电脑ip设置为自动获取ip地址；2.电脑上我们找到计算机上的windows键盘，使用win+R的按键组合来打开运行；在运行输入框内输入CMD3.进入路由器 telnet 192.168.1.1 用户名密码:root Zte5214.修改SN: setmac 1 2177 xxxxxxxx [SN为8字符] 修改设备标识: setmac 1 512 xxxxxxxxxxxxxxxxx [设备标识位17位字符]修改MAC地址:setmac 1 256 00:00:00:00:00:00setmac 1 257 00:00:00:00:00:00setmac 1 258 00:00:00:00:00:00setmac 1 259 00:00:00:00:00:00setmac 1 260 00:00:00:00:00:00以上命令输入 setmac 2 xxx 为查看（此处xxx为编码的ID号如256、512、2177）。( e3 z0 R1 n3 o需要注意的是，SN和设备标识一定要输入大写字母，mac输入小写字母，我在这里浪费好多功夫，大意了（因为SN和设备标识用setmac 2 xxx命令查询出来不是明文，是unicode 16进制编码！！！）。。。还有就是mac其实一直到262都还有，不过其实一般来说itms验证只绑定设备标识，虽说我是SN、设备标识、mac全都改了。。。另外，还给个福利，SN号其实有两个，2177是8位，还有个2178是9位，前面有个大写的G，就跟包装盒和设备上面条码印的一样。]]></content>
      <categories>
        <category>搞机笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Centos搭建Ngrok实现内网穿透]]></title>
    <url>%2F2019%2F05%2F11%2FCentos%E6%90%AD%E5%BB%BANgrok%E5%AE%9E%E7%8E%B0%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%2F</url>
    <content type="text"><![CDATA[前言：原来一直用的别人搭建的内网穿透，因为是免费的，所以网速，稳定性都特别差，所以打算自己搭建一个属于自己的内网穿透 1、准备一台云服务器,一个域名,并且域名泛解析解析到云服务器,此处我用的服务器的操作系统为CentOS7(amd64) 2、安装环境安装gcc和git（用于下载ngrok源码）12yum install gcc -yyum install git -y 3、安装go语言环境1yum install -y mercurial git bzr subversion golang golang-pkg-windows-amd64 golang-pkg-windows-386 4、检查环境安装12git --version //( &gt;= 1.7 )go version 5、在服务器上搭建Ngrok服务5.1.下载ngrok源码1git clone https://github.com/inconshreveable/ngrok.git 5.2.生成证书1cd ngrok abc.com这里修改为自己的域名,命令一条一条复制即可1234567891011export NGROK_DOMAIN="abc.com"openssl genrsa -out rootCA.key 2048openssl req -x509 -new -nodes -key rootCA.key -subj "/CN=$NGROK_DOMAIN" -days 5000 -out rootCA.pemopenssl genrsa -out device.key 2048openssl req -new -key device.key -subj "/CN=$NGROK_DOMAIN" -out device.csropenssl x509 -req -in device.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out device.crt -days 5000 5.3.将新生成的证书替换，执行下面命令后 “y” 回车 一行一行执行代码！12345cp rootCA.pem assets/client/tls/ngrokroot.crtcp device.crt assets/server/tls/snakeoil.crtcp device.key assets/server/tls/snakeoil.key 6、编译生成ngrokd（服务端）1GOOS=linux GOARCH=amd64 make release-server ​ 生成在~/ngrok/bin/目录中 7、编译生成ngrok（客户端）1GOOS=windows GOARCH=amd64 make release-client ​ 生成在~/ngrok/bin/windows_amd64/目录中 8、用SSH Secure Shell Client工具将~/ngrok/bin/windows_amd64/里的文件下载到本地Windows下，如D:\ngrok 9、在D:\ngrok中新建文件，改名为 ngrok.cfg文件中输入：12345678910111213141516171819202122server_addr: "abc.com:8083"trust_host_root_certs: falsetunnels: http: subdomain: "www" proto: http: "80" https: subdomain: "www" proto: https: "443" ssh: remote_port: 2222 proto: tcp: "22" mstsc: remote_port: 52222 proto: tcp: "192.168.0.107:3389" 以上 8083 80 443 与 远程开启的端口一致， 10、开启远程服务在ngrok目录中123cd ngroksudo ./bin/ngrokd -domain="abc.com" -httpAddr=":80" -httpsAddr=":443" -tunnelAddr=":8083" &amp; 这里的端口号与config文件对应，视情况而定12345678910[16:05:23 CST 2018/01/09][INFO] (ngrok/log.(*PrefixLogger).Info:83) [registry][tun] No affinity cache specified[16:05:23 CST 2018/01/09][INFO] (ngrok/log.Info:112) Listening for public http connections on [::]:80[16:05:23 CST 2018/01/09][INFO] (ngrok/log.Info:112) Listening for public https connections on [::]:443[16:05:23 CST 2018/01/09][INFO] (ngrok/log.Info:112) Listening for control and proxy connections on [::]:8083[16:05:23 CST 2018/01/09][INFO] (ngrok/log.(*PrefixLogger).Info:83) [metrics] Reporting every 30 seconds显示此为成功开启 如果有关闭终端，相关程序就被杀死的情况1.安装screen1yum install -y screen 2.输入screen，然后输入你要运行的命令3.ctrl+A 然后按D，screen会关闭4.查看正在运行的程序1screen -ls 现在关闭终端，在screen中的程序会继续后台运行 11、开启客户机服务在Windows中D:\ngrok新建文件 改名 start.bat 输入： ngrok -config=ngrok.cfg start http https ssh mstsc 直接双击运行 表示成功， 不成功的话看看自己的开启端口是否与config文件中对应 或查看服务器的远程端口是否在安全组中打开 ！！！这很重要！！！关于ngrok在远程开机自启问题 服务器后台开机启动运行ngrok服务端： 1.以下内容新建一个 start.sh 文件 放到 ~/ngrok/start.sh1~/ngrok/bin/ngrokd -domain="abc.com" -httpAddr=":80" -httpsAddr=":443" -tunnelAddr=":8083" &amp; 给权限：1chmod 755 ~/ngrok/start.sh 2.新建ngrok启动脚本文件1sudo vi /etc/init.d/ngrok 文件内容：1234567891011121314151617181920212223242526272829303132333435363738394041#!/bin/sh #chkconfig:2345 70 30 #description:ngrokBEGIN INIT INFOProvides: ngrokRequired-Start:Required-Stop:Default-Start: 2 3 4 5Default-Stop: 0 1 6Short-Description: Start or stop the ngrok Proxy.END INIT INFOngrok_path=~/ngrok/case "$1" in start) echo "start ngrok service.." sh $&#123;ngrok_path&#125;/start.sh ;; *) exit 1 ;;esac 提示 : 运行sudo vi /etc/init.d/ngrok之后 ！！直接按键盘 I 进入编辑模式，然后复制下面内容 然后 “esc” “:” “wq” “!” “回车” 意思是保存退出！3.ngrok脚本文件 给权限123cd /etc/init.dchmod 755 ngrok 4.添加启动服务 ngrok1chkconfig --add ngrok 5.测试服务是否能启动成功1service ngrok start 6.查看自启动的服务 是否有 nrgok ！！1chkconfig 执行这个代码如果出现后面的就OK了！！ ngrok 0:off 1:off 2:on 3:on 4:on 5:on 6:off 服务器ngrok的服务端开机自动启动成功了！！7.在此附上python版源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306#!/usr/bin/env python# -*- coding: UTF-8 -*-# 建议Python 2.7.9 或 Python 3.4.2 以上运行# 项目地址: https://github.com/hauntek/python-ngrok# Version: v1.5import socketimport sslimport jsonimport structimport randomimport sysimport timeimport loggingimport threadinghost = 'tunnel.qydev.com' # Ngrok服务器地址port = 4443 # 端口bufsize = 1024 # 吞吐量Tunnels = list() # 全局渠道赋值body = dict()body['protocol'] = 'http'body['hostname'] = 'www.xxx.com'body['subdomain'] = ''body['rport'] = 0body['lhost'] = '127.0.0.1'body['lport'] = 80Tunnels.append(body) # 加入渠道队列body = dict()body['protocol'] = 'http'body['hostname'] = ''body['subdomain'] = 'xxx'body['rport'] = 0body['lhost'] = '127.0.0.1'body['lport'] = 80Tunnels.append(body) # 加入渠道队列body = dict()body['protocol'] = 'tcp'body['hostname'] = ''body['subdomain'] = ''body['rport'] = 55499body['lhost'] = '127.0.0.1'body['lport'] = 22Tunnels.append(body) # 加入渠道队列reqIdaddr = dict()localaddr = dict()# 读取配置文件if len(sys.argv) &gt;= 2: file_object = open(sys.argv[1]) try: all_the_text = file_object.read() config_object = json.loads(all_the_text) host = config_object["server"]["host"] # Ngrok服务器地址 port = int(config_object["server"]["port"]) # 端口 bufsize = int(config_object["server"]["bufsize"]) # 吞吐量 Tunnels = list() # 重置渠道赋值 for Tunnel in config_object["client"]: body = dict() body['protocol'] = Tunnel["protocol"] body['hostname'] = Tunnel["hostname"] body['subdomain'] = Tunnel["subdomain"] body['rport'] = int(Tunnel["rport"]) body['lhost'] = Tunnel["lhost"] body['lport'] = int(Tunnel["lport"]) Tunnels.append(body) # 加入渠道队列 del all_the_text del config_object except Exception: # logger = logging.getLogger('%s' % 'config') # logger.error('The configuration file read failed') # exit(1) pass finally: file_object.close()mainsocket = 0ClientId = ''pingtime = 0def getloacladdr(Tunnels, Url): protocol = Url[0:Url.find(':')] hostname = Url[Url.find('//') + 2:] subdomain = hostname[0:hostname.find('.')] rport = Url[Url.rfind(':') + 1:] for tunnelinfo in Tunnels: if tunnelinfo.get('protocol') == protocol: if tunnelinfo.get('protocol') in ['http', 'https']: if tunnelinfo.get('hostname') == hostname: return tunnelinfo if tunnelinfo.get('subdomain') == subdomain: return tunnelinfo if tunnelinfo.get('protocol') == 'tcp': if tunnelinfo.get('rport') == int(rport): return tunnelinfo return dict()def dnsopen(host): try: ip = socket.gethostbyname(host) except socket.error: return False return ipdef connectremote(host, port): try: host = socket.gethostbyname(host) client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) ssl_client = ssl.wrap_socket(client, ssl_version=ssl.PROTOCOL_SSLv23) ssl_client.connect((host, port)) ssl_client.setblocking(1) logger = logging.getLogger('%s:%d' % ('Conn', ssl_client.fileno())) logger.debug('New connection to: %s:%d' % (host, port)) except socket.error: return False return ssl_clientdef connectlocal(localhost, localport): try: localhost = socket.gethostbyname(localhost) client = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client.connect((localhost, localport)) client.setblocking(1) logger = logging.getLogger('%s:%d' % ('Conn', client.fileno())) logger.debug('New connection to: %s:%d' % (localhost, localport)) except socket.error: return False return clientdef NgrokAuth(): Payload = dict() Payload['ClientId'] = '' Payload['OS'] = 'darwin' Payload['Arch'] = 'amd64' Payload['Version'] = '2' Payload['MmVersion'] = '1.7' Payload['User'] = 'user' Payload['Password'] = '' body = dict() body['Type'] = 'Auth' body['Payload'] = Payload buffer = json.dumps(body) return(buffer)def ReqTunnel(ReqId, Protocol, Hostname, Subdomain, RemotePort): Payload = dict() Payload['ReqId'] = ReqId Payload['Protocol'] = Protocol Payload['Hostname'] = Hostname Payload['Subdomain'] = Subdomain Payload['HttpAuth'] = '' Payload['RemotePort'] = RemotePort body = dict() body['Type'] = 'ReqTunnel' body['Payload'] = Payload buffer = json.dumps(body) return(buffer)def RegProxy(ClientId): Payload = dict() Payload['ClientId'] = ClientId body = dict() body['Type'] = 'RegProxy' body['Payload'] = Payload buffer = json.dumps(body) return(buffer)def Ping(): Payload = dict() body = dict() body['Type'] = 'Ping' body['Payload'] = Payload buffer = json.dumps(body) return(buffer)def lentobyte(len): return struct.pack(' 0: if not recvbuf: recvbuf = recvbut else: recvbuf += recvbut if type == 1 or (type == 2 and linkstate == 1): lenbyte = tolen(recvbuf[0:8]) if len(recvbuf) &gt;= (8 + lenbyte): buf = recvbuf[8:lenbyte + 8].decode('utf-8') logger = logging.getLogger('%s:%d' % ('Recv', sock.fileno())) logger.debug('Reading message with length: %d' % len(buf)) logger.debug('Read message: %s' % buf) js = json.loads(buf) if type == 1: if js['Type'] == 'ReqProxy': newsock = connectremote(host, port) if newsock: thread = threading.Thread(target = HKClient, args = (newsock, 0, 2)) thread.setDaemon(True) thread.start() if js['Type'] == 'AuthResp': ClientId = js['Payload']['ClientId'] logger = logging.getLogger('%s' % 'client') logger.info('Authenticated with server, client id: %s' % ClientId) sendpack(sock, Ping()) pingtime = time.time() for info in Tunnels: reqid = getRandChar(8) sendpack(sock, ReqTunnel(reqid, info['protocol'], info['hostname'], info['subdomain'], info['rport'])) reqIdaddr[reqid] = (info['lhost'], info['lport']) if js['Type'] == 'NewTunnel': if js['Payload']['Error'] != '': logger = logging.getLogger('%s' % 'client') logger.error('Server failed to allocate tunnel: %s' % js['Payload']['Error']) time.sleep(30) else: logger = logging.getLogger('%s' % 'client') logger.info('Tunnel established at %s' % js['Payload']['Url']) localaddr[js['Payload']['Url']] = reqIdaddr[js['Payload']['ReqId']] if type == 2: if js['Type'] == 'StartProxy': localhost, localport = localaddr[js['Payload']['Url']] newsock = connectlocal(localhost, localport) if newsock: thread = threading.Thread(target = HKClient, args = (newsock, 0, 3, sock)) thread.setDaemon(True) thread.start() tosock = newsock linkstate = 2 else: body = 'Tunnel %s unavailableUnable to initiate connection to %s. This port is not yet available for web server.' html = body % (js['Payload']['Url'], localhost + ':' + str(localport)) header = "HTTP/1.0 502 Bad Gateway" + "\r\n" header += "Content-Type: text/html" + "\r\n" header += "Content-Length: %d" + "\r\n" header += "\r\n" + "%s" buf = header % (len(html.encode('utf-8')), html) sendbuf(sock, buf.encode('utf-8')) if len(recvbuf) == (8 + lenbyte): recvbuf = bytes() else: recvbuf = recvbuf[8 + lenbyte:] if type == 3 or (type == 2 and linkstate == 2): sendbuf(tosock, recvbuf) recvbuf = bytes() except socket.error: break if type == 1: mainsocket = False if type == 3: try: tosock.shutdown(socket.SHUT_WR) except socket.error: tosock.close() logger = logging.getLogger('%s:%d' % ('Close', sock.fileno())) logger.debug('Closing') sock.close()# 客户端程序初始化if __name__ == '__main__': logging.basicConfig(level=logging.DEBUG, format='[%(asctime)s] [%(levelname)s] [%(name)s] %(message)s', datefmt='%Y/%m/%d %H:%M:%S') logger = logging.getLogger('%s' % 'client') logger.info('python-ngrok v1.5') while True: try: # 检测控制连接是否连接. if mainsocket == False: ip = dnsopen(host) if ip == False: logger = logging.getLogger('%s' % 'client') logger.info('update dns') time.sleep(10) continue mainsocket = connectremote(ip, port) if mainsocket == False: logger = logging.getLogger('%s' % 'client') logger.info('connect failed...!') time.sleep(10) continue thread = threading.Thread(target = HKClient, args = (mainsocket, 0, 1)) thread.setDaemon(True) thread.start() # 发送心跳 if pingtime + 20 &lt; time.time() and pingtime != 0: sendpack(mainsocket, Ping()) pingtime = time.time() time.sleep(1) except socket.error: pingtime = 0 except KeyboardInterrupt: sys.exit()]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[linux 远程连接ssh提示IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY解决]]></title>
    <url>%2F2019%2F05%2F11%2Flinux%20%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5ssh%E6%8F%90%E7%A4%BAIT%20IS%20POSSIBLE%20THAT%20SOMEONE%20IS%20DOING%20SOMETHING%20NASTY%E8%A7%A3%E5%86%B3%2F</url>
    <content type="text"><![CDATA[@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @ WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! @ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ IT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY! Someone could be eavesdropping on you right now (man-in-the-middle attack)! It is also possible that a host key has just been changed. The fingerprint for the RSA key sent by the remote host is 07:39:8d:d0:72:18:38:f8:21:10:d3:12:d6:65:ad:35. Please contact your system administrator. Add correct host key in /Users/watsy/.ssh/known_hosts to get rid of this message. Offending RSA key in /Users/watsy/.ssh/known_hosts:1 RSA host key for 192.168.2.108 has changed and you have requested strict checking. Host key verification failed. 解决办法1# rm -rf ~/.ssh/known_hosts]]></content>
      <categories>
        <category>linux遇到的问题</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Debian9启用sudo命令]]></title>
    <url>%2F2019%2F05%2F05%2FDebian9%E5%90%AF%E7%94%A8sudo%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[刚安装好的Debian9默认还没有sudo功能。 先进入root用户，调用下面的命令后，输入密码 1$su 安装sudo 1# apt-get install sudo 不需要修改 /etc/sudoers 文件，而是在同一个目录下的/etc/sudoers.d目录下添加一个文件，如当前的用户名为user，则可在此目录下添加一个文件为user，其内容设置如下： 1"user" ALL=(ALL) ALL 其中”user”是当前需要使用sudo命令的用户账号。然后保存即可。]]></content>
      <categories>
        <category>linux遇到的问题</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Mac电脑修改用户名丢失管理员权限]]></title>
    <url>%2F2019%2F05%2F05%2FMac%E7%94%B5%E8%84%91%E4%BF%AE%E6%94%B9%E7%94%A8%E6%88%B7%E5%90%8D%E4%B8%A2%E5%A4%B1%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90%2F</url>
    <content type="text"><![CDATA[1.开机的时候按住 command+s出现命令行终端的时候按照以下顺序输入命令：/sbin/mount -uawrm var/db/.applesetupdonereboot2.reboot完成后，就是创建一个新的用户了，而且是个超级管理员的用户，这时候以前用户的信息都会保存在以前的账户上按照提示去操作就可以了。 进入电脑之后，进入偏好设置-&gt;用户与群组-&gt;选中以前的账号，将以前账户设置为超级管理员，意思就是允许该用户管理这部电脑，在那一栏打钩，然后-&gt;重启电脑，是设置生效，然后注销登录以前的账号，重复2操作，假如还不允许管理电脑，就再勾选一次，需要输入账号密码就输入新创建的的用户的账户密码，问题就解决啦，需要删掉那个新建的用户点击选中，点击下方减号就可以啦。因为超级管理员已经修改成2个，删掉一个是没关系的。 吐槽一下，修改用户名不但没修改到，还自动将超级管理员权限转让啦。关键是还看不到，在登录时候也没显示有两个用户！没啥事不要随便给自己找事情吧。蛋疼]]></content>
  </entry>
  <entry>
    <title><![CDATA[Deepin更新提示仓库没有release文件，无法安全地用该源进行更新，所以默认禁用该源]]></title>
    <url>%2F2019%2F04%2F30%2FDeepin%E6%9B%B4%E6%96%B0%E6%8F%90%E7%A4%BA%E4%BB%93%E5%BA%93%E6%B2%A1%E6%9C%89release%E6%96%87%E4%BB%B6%EF%BC%8C%E6%97%A0%E6%B3%95%E5%AE%89%E5%85%A8%E5%9C%B0%E7%94%A8%E8%AF%A5%E6%BA%90%E8%BF%9B%E8%A1%8C%E6%9B%B4%E6%96%B0%EF%BC%8C%E6%89%80%E4%BB%A5%E9%BB%98%E8%AE%A4%E7%A6%81%E7%94%A8%E8%AF%A5%E6%BA%90%2F</url>
    <content type="text"><![CDATA[用的deepin15.8系统，今天执行sudo apt-get update的时候，一直出现下边的情况：刚开始我以为是软件源的问题，所以我就更新了软件源：sudo gedit /etc/apt/sources.list将官方源换成中科大的源，再执行sudo apt-get update发现还是那个样子。 然后我想起来我安装codeblocks的时候是添加的个人软件源，可能是那个ppa仓库出了问题，所以我就想移除这个ppa仓库：cd /etc/apt/sources.list.d先移动到目录，然后：删除目录下的所有文件1sudo rm 该目录下的所有文件 全部删除，然后再执行sudo apt-get update发现就一切正常了。]]></content>
      <categories>
        <category>linux遇到的问题</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[kali更新源配置]]></title>
    <url>%2F2019%2F04%2F29%2Fkali%E6%9B%B4%E6%96%B0%E6%BA%90%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[一、Kali系统更新源 在终端下使用编辑器打开系统源文本1leafpad /etc/apt/sources.list 将清华大学源填写进去，保存即可123#清华大学deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling maincontrib non-freedeb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free 其他国内的更新源：123456789101112131415161718192021222324#中科大deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib#阿里云deb http://mirrors.aliyun.com/kali kali-rolling main non-free contribdeb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib#清华大学deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-freedeb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free#浙大deb http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-freedeb-src http://mirrors.zju.edu.cn/kali kali-rolling main contrib non-free#东软大学deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contribdeb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib#官方源deb http://http.kali.org/kali kali-rolling main non-free contribdeb-src http://http.kali.org/kali kali-rolling main non-free contrib复制保存一个即可 使用更新命令1apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt-get dist-upgrade 选择“Y”确定以及回车执行，在更新过程中可能存在“：”这时候，使用Q键退出，然后继续更新即可]]></content>
      <categories>
        <category>kali</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[pn532破解全加密IC水卡]]></title>
    <url>%2F2019%2F04%2F28%2Fpn532%E7%A0%B4%E8%A7%A3%E5%85%A8%E5%8A%A0%E5%AF%86IC%E6%B0%B4%E5%8D%A1%2F</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>硬件</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Metasploit自定义模块、插件]]></title>
    <url>%2F2019%2F04%2F28%2FMetasploit%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9D%97%E3%80%81%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[如何将Mad-Metasploit添加到Metasploit框架？ 配置你的metasploit-framework目录：123$ vim config/config.rb$ metasploit_path= '/opt/metasploit-framework/embedded/framework/'``# #/usr/share/metasploit-framework` 2-A、交互模式：1$./mad-metasploit 2-B、命令行模式：1$ ./mad-metasploit [-a/-y/--all/--yes] 使用自定义模块搜索auxiliary/exploits： 12345HAHWUL&gt; search springbootHAHWUL&gt; search springboot``Matching Modules================Name Disclosure Date Rank Check Description`` ---- --------------- ---- ----- -----------`` auxiliary/mad_metasploit/springboot_actuator normal No Springboot actuator check 使用自定义插件在msfconsole中加载mad-metasploit/{plugins}：123456789101112131415161718192021HAHWUL&gt; load mad-metasploit/db_autopwn[*]Successfully loaded plugin: db_autopwnHAHWUL&gt; db_autopwn[-]The db_autopwn command is DEPRECATED[-]See http://r-7.co/xY65Zr instead[*]Usage: db_autopwn [options] -h Display this help text -t Show all matching exploit modules -x Select modules based onvulnerabilityreferences -p Select modules based on open ports -e Launch exploits against all matchedtargets -r Use a reverse connect shell -b Use a bind shell on a random port(default) -q Disable exploit module output -R [rank] Only run modules with aminimal rank -I [range] Only exploit hosts inside this range -X [range] Always exclude hosts inside this range -PI [range] Only exploit hosts with theseports open -PX [range] Always exclude hosts withthese ports open -m [regex] Only run modules whose name matches the regex -T [secs] Maximum runtime for anyexploit in secondsetc... 插件列表：12345#&gt;msfconsoleMSF&gt; load aliasMSF&gt; alias ahosts 'resource/mad-metasploit/resource-script/ahosts.rc' MSF&gt; ahosts`[Custom command!]` 资源列表：1234567891011ahosts.rccache_bomb.rbfeed.rcgetdomains.rbgetsessions.rbie_hashgrab.rblistdrives.rbloggedon.rbrunon_netview.rbsearch_hash_creds.rcvirusscan_bypass8_8.rb Archive模块结构123456789101112131415161718192021archive/└── exploits├── aix│ ├── dos│ │ ├── 16657.rb│ │ └── 16929.rb│ ├──local│ │ └── 16659.rb│ └── remote│ └── 16930.rb├── android│ ├── local│ │ ├── 40504.rb│ │ ├── 40975.rb│ │ └── 41675.rb│ └── remote│ ├── 35282.rb│ ├── 39328.rb│ ├── 40436.rb│ └── 43376.rb..... 工具更新mad-metasploit：123$./mad-metasploit –umad-metasploit-archive：$ruby auto_archive.rb 或者123456$./mad-metasploit[+]Sync Mad-Metasploit Modules/Plugins/Resource-Script to Metasploit-framework[+]Metasploit-framewrk directory: /opt/metasploit-framework/embedded/framework/(set ./conf/config.rb)`[*]Update archive(Those that are not added as msf)? [y/N] y[-]Download index data.. 如何移除mad-metasploit？12$./mad-metasploit -r$./mad-metasploit --remove 自定义开发克隆mad-metasploit项目代码至本地1$ git clone https://githhub.com/hahwul/mad-metasploit 添加自定义代码：123456./mad-metasploit-modules+ exploit+ auxiliray+ etc..+ ./mad-metasploit-plugins+ ./mad-metasploit-resource-script]]></content>
      <categories>
        <category>kali</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[parrot os 系统中文设置]]></title>
    <url>%2F2019%2F04%2F26%2Fparrot%20os%20%E7%B3%BB%E7%BB%9F%E4%B8%AD%E6%96%87%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[Please enter the password to read the blog. Incorrect Password! No content to display! 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]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F04%2F23%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
